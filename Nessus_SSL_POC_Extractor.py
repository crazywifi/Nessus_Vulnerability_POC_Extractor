#/usr/bin/python

#import count
import os
import csv

# Console colors
W  = '\033[0m'  # white (normal)
R  = '\033[31m' # red
G  = '\033[32m' # green
O  = '\033[33m' # orange
B  = '\033[34m' # blue
P  = '\033[35m' # purple
C  = '\033[36m' # cyan
GR = '\033[37m' # gray
Y = '\033[93m'
BOLD = '\033[1m'
END = '\033[0m'


def banner():

        print O+'#############################################################################################'
        print '#                          <<<Nessus Vulnerability Extractor>>>                             #'
        print '#                                                                                           #'
        print '#                                Made by <<RISHABH SHARMA>>                                 #'
        print '#                                  Twitter : @blacknet22                                    #'
        print '#                             operating system : Linux                                      #'
        print '#                                                                                           #'
        print '#############################################################################################'+END

def Name_Sanitizer(vuln_name):

	sanitize = ["/","*","\\","?","_","\",","(",")","-","?","'","\\","[","]","{","}"]
	for x in sanitize:
		vuln_name = vuln_name.replace(x," ")
	return vuln_name


def Nessus_SSL_POC_Extractor(Folder_Path):

	print BOLD+P+"Start Analysing Nessus CSV Output....\n"+END
        file = open(Folder_Path, 'r')
        reader = csv.reader(file)
	for line in reader:
		if (line[7] == "SSL Medium Strength Cipher Suites Supported"):
			vuln_name = str(line[7])
			ip = str(line[4])
			port = str(line[6])
			ip_port = ip+"_"+port 
			vuln_name = Name_Sanitizer(vuln_name)
			vuln_name = vuln_name.replace(" ","_") 
			vulnerable_path = "Output/"+vuln_name
			if not os.path.exists(vulnerable_path):
				os.makedirs(vulnerable_path)
			nmap_cmd = "nmap -sS -Pn --script=+ssl-enum-ciphers -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
			print nmap_cmd
			os.system(nmap_cmd)
			#screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
			#os.system(screenshot_cmd)
			print "Scanning done......" 

		if ((line[7] == "SSL Certificate Signed Using Weak Hashing Algorithm") or (line[7] == "SSL Certificate Cannot Be Trusted") or (line[7] == "SSL Self-Signed Certificate") or (line[7] == "SSL Certificate Expiry")):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        nmap_cmd = "nmap -sS -Pn --script=+ssl-cert -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        print nmap_cmd
                        os.system(nmap_cmd)
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......"

		if (line[7] == "SSL RC4 Cipher Suites Supported (Bar Mitzvah)"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        #nmap_cmd = "nmap -sS -Pn --script=+ssl-enum-ciphers -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        #print nmap_cmd
                        #os.system(nmap_cmd)
			testssl_cmd = "./testssl/testssl.sh --quiet -4 -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port
			os.system(testssl_cmd)
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......" 
		

		if (line[7] == "SSL/TLS Diffie-Hellman Modulus <= 1024 Bits (Logjam)"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        #nmap_cmd = "nmap -sS -Pn --script=+ssl-enum-ciphers -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        #print nmap_cmd
                        #os.system(nmap_cmd)
                        testssl_cmd = "./testssl/testssl.sh --quiet -J -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......" 
		


		if (line[7] == "SSL Version 2 and 3 Protocol Detection"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        nmap_cmd = "nmap -sS -Pn --script=+sslv2 -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        print nmap_cmd
                        os.system(nmap_cmd)
                        #testssl_cmd = "./testssl/testssl.sh --quiet -J -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        #os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......" 


		if ((line[7] == "SSH Weak Algorithms Supported") or (line[7] == "SSH Server CBC Mode Ciphers Enabled") or (line[7] == "SSH Weak MAC Algorithms Enabled")):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        nmap_cmd = "nmap -sS -Pn --script=+ssh2-enum-algos -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        print nmap_cmd
                        os.system(nmap_cmd)
                        #testssl_cmd = "./testssl/testssl.sh --quiet -J -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        #os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......"

		

		if (line[7] == "SSL/TLS Protocol Initialization Vector Implementation Information Disclosure Vulnerability (BEAST)"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        #nmap_cmd = "nmap -sS -Pn --script=+ssh2-enum-algos -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        #print nmap_cmd
                        #os.system(nmap_cmd)
                        testssl_cmd = "./testssl/testssl.sh --quiet -A -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......"  

		if (line[7] == "SSL 64-bit Block Size Cipher Suites Supported (SWEET32)"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        #nmap_cmd = "nmap -sS -Pn --script=+ssh2-enum-algos -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        #print nmap_cmd
                        #os.system(nmap_cmd)
                        testssl_cmd = "./testssl/testssl.sh --quiet -W -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......" 



		if (line[7] == "SSLv3 Padding Oracle On Downgraded Legacy Encryption Vulnerability (POODLE)"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        #nmap_cmd = "nmap -sS -Pn --script=+ssh2-enum-algos -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        #print nmap_cmd
                        #os.system(nmap_cmd)
                        testssl_cmd = "./testssl/testssl.sh --quiet -O -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......" 

		if (line[7] == "SSL/TLS EXPORT_RSA <= 512-bit Cipher Suites Supported (FREAK)"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        #nmap_cmd = "nmap -sS -Pn --script=+ssh2-enum-algos -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        #print nmap_cmd
                        #os.system(nmap_cmd)
                        testssl_cmd = "./testssl/testssl.sh --quiet -F -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......" 

		if (line[7] == "SSL DROWN Attack Vulnerability (Decrypting RSA with Obsolete and Weakened eNcryption)"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_")
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        #nmap_cmd = "nmap -sS -Pn --script=+ssh2-enum-algos -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        #print nmap_cmd
                        #os.system(nmap_cmd)
                        testssl_cmd = "./testssl/testssl.sh --quiet -D -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......" 

		if (line[7] == "Transport Layer Security (TLS) Protocol CRIME Vulnerability"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        #nmap_cmd = "nmap -sS -Pn --script=+ssh2-enum-algos -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        #print nmap_cmd
                        #os.system(nmap_cmd)
                        testssl_cmd = "./testssl/testssl.sh --quiet -C -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......" 

		if (line[7] == "SSL/TLS Renegotiation Handshakes MiTM Plaintext Data Injection"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        #nmap_cmd = "nmap -sS -Pn --script=+ssh2-enum-algos -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        #print nmap_cmd
                        #os.system(nmap_cmd)
                        testssl_cmd = "./testssl/testssl.sh --quiet -R -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......" 


		if (line[7] == "SMB Signing Disabled"):
                        vuln_name = str(line[7])
                        ip = str(line[4])
                        port = str(line[6])
                        ip_port = ip+"_"+port 
                        vuln_name = Name_Sanitizer(vuln_name)
                        vuln_name = vuln_name.replace(" ","_") 
                        vulnerable_path = "Output/"+vuln_name
                        if not os.path.exists(vulnerable_path):
                                os.makedirs(vulnerable_path)
                        nmap_cmd = "nmap -sS -Pn --script=+ssh2-enum-algos -oN Output/"+vuln_name+"/"+ip_port+"_.txt -p "+port+" "+ip
                        print nmap_cmd
                        os.system(nmap_cmd)
                        #testssl_cmd = "./testssl/testssl.sh --quiet -W -oL Output/"+vuln_name+"/"+ip_port+"_.txt "+ip+":"+port 
                        #os.system(testssl_cmd) 
                        screenshot_cmd = "gnome-screenshot -f "+vulnerable_path+"/"+ip_port+".jpg"
                        os.system(screenshot_cmd)
                        print "Scanning done......" 





def Nessus_SSL_POC_count(Folder_Path):

        print BOLD+P+"Start Analysing Nessus CSV Output....\n"+END
        file = open(Folder_Path, 'r')
        reader = csv.reader(file)
	count1 = 0
	count2 = 0
	count3 = 0
	count4 = 0
	count5 = 0
	count6 = 0
	count7 = 0
	count8 = 0
	count9 = 0
	count10 = 0
	count11 = 0
	count12 = 0
	count13 = 0
	count14 = 0
	count15 = 0
	count16 = 0
	count17 = 0
	count18 = 0
	count19 = 0
	count20 = 0
        for line in reader:
                if (line[7] == "SSL Medium Strength Cipher Suites Supported"):
			count1 = count1 + 1
		if (line[7] == "SSL Certificate Signed Using Weak Hashing Algorithm"):
                        count2 = count2 + 1
		if (line[7] == "SSL Certificate Cannot Be Trusted"):
                        count3 = count3 + 1
		if (line[7] == "SSL Self-Signed Certificate"):
                        count4 = count4 + 1
		if (line[7] == "SSL Certificate Expiry"):
                        count5 = count5 + 1
		if (line[7] == "SSL RC4 Cipher Suites Supported (Bar Mitzvah)"):
                        count6 = count6 + 1
		if (line[7] == "SSL/TLS Diffie-Hellman Modulus <= 1024 Bits (Logjam)"):
                        count7 = count7 + 1
		if (line[7] == "SSL Certificate Chain Contains RSA Keys Less Than 2048 bits"):
                        count8 = count8 + 1
		if (line[7] == "SSL Version 2 and 3 Protocol Detection"):
                        count9 = count9 + 1
		if (line[7] == "SSH Weak Algorithms Supported"):
                        count10 = count10 + 1
		if (line[7] == "SSH Server CBC Mode Ciphers Enabled"):
                        count11 = count11 + 1
		if (line[7] == "SSH Weak MAC Algorithms Enabled"):
                        count12 = count12 + 1
		if (line[7] == "SSL/TLS Protocol Initialization Vector Implementation Information Disclosure Vulnerability (BEAST)"):
                        count13 = count13 + 1
		if (line[7] == "SSL 64-bit Block Size Cipher Suites Supported (SWEET32)"):
                        count14 = count14 + 1
		if (line[7] == "SMB Signing Disabled"):
                        count15 = count15 + 1
		if (line[7] == "SSLv3 Padding Oracle On Downgraded Legacy Encryption Vulnerability (POODLE)"):
                        count16 = count16 + 1
		if (line[7] == "SSL/TLS EXPORT_RSA <= 512-bit Cipher Suites Supported (FREAK)"):
                        count17 = count17 + 1
		if (line[7] == "SSL DROWN Attack Vulnerability (Decrypting RSA with Obsolete and Weakened eNcryption)"):
                        count18 = count18 + 1
		if (line[7] == "Transport Layer Security (TLS) Protocol CRIME Vulnerability"):
                        count19 = count19 + 1
		if (line[7] == "SSL/TLS Renegotiation Handshakes MiTM Plaintext Data Injection"):
                        count20 = count20 + 1

	print BOLD+O+"SSL Medium Strength Cipher Suites Supported: "+END,BOLD+P+str(count1)+END
	print BOLD+O+"SSL Certificate Signed Using Weak Hashing Algorithm: "+END,BOLD+P+str(count2)+END
	print BOLD+O+"SSL Certificate Cannot Be Trusted: "+END,BOLD+P+str(count3)+END
	print BOLD+O+"SSL Self-Signed Certificate: "+END,BOLD+P+str(count4)+END
	print BOLD+O+"SSL Certificate Expiry: "+END,BOLD+P+str(count5)+END
	print BOLD+O+"SSL RC4 Cipher Suites Supported (Bar Mitzvah): "+END,BOLD+P+str(count6)+END
	print BOLD+O+"SSL/TLS Diffie-Hellman Modulus <= 1024 Bits (Logjam): "+END,BOLD+P+str(count7)+END
	print BOLD+O+"SSL Certificate Chain Contains RSA Keys Less Than 2048 bits: "+END,BOLD+P+str(count8)+END
	print BOLD+O+"SSL Version 2 and 3 Protocol Detection: "+END,BOLD+P+str(count9)+END
	print BOLD+O+"SSH Weak Algorithms Supported: "+END,BOLD+P+str(count10)+END
	print BOLD+O+"SSH Server CBC Mode Ciphers Enabled: "+END,BOLD+P+str(count11)+END
	print BOLD+O+"SSH Weak MAC Algorithms Enabled: "+END,BOLD+P+str(count12)+END
	print BOLD+O+"SSL/TLS Protocol Initialization Vector Implementation Information Disclosure Vulnerability (BEAST): "+END,BOLD+P+str(count13)+END
	print BOLD+O+"SSL 64-bit Block Size Cipher Suites Supported (SWEET32): "+END,BOLD+P+str(count14)+END
	print BOLD+O+"SMB Signing Disabled: "+END,BOLD+P+str(count15)+END
	print BOLD+O+"SSLv3 Padding Oracle On Downgraded Legacy Encryption Vulnerability (POODLE): "+END,BOLD+P+str(count16)+END
	print BOLD+O+"SSL/TLS EXPORT_RSA <= 512-bit Cipher Suites Supported (FREAK): "+END,BOLD+P+str(count17)+END
	print BOLD+O+"SSL DROWN Attack Vulnerability (Decrypting RSA with Obsolete and Weakened eNcryption): "+END,BOLD+P+str(count18)+END
	print BOLD+O+"Transport Layer Security (TLS) Protocol CRIME Vulnerability: "+END,BOLD+P+str(count19)+END
	print BOLD+O+"SSL/TLS Renegotiation Handshakes MiTM Plaintext Data Injection: "+END,BOLD+P+str(count20)+END




def main():
        banner()
	Output_Path = "Output"
	if not os.path.exists(Output_Path):
		os.makedirs(Output_Path)
	try:
		Folder_Path = raw_input(BOLD+Y+"Enter Nessus CSV Output File Name: ")
		Nessus_SSL_POC_Extractor(Folder_Path)
		Nessus_SSL_POC_count(Folder_Path)

        except KeyboardInterrupt:
                print "\nKeyboard Interrupt..."
        except IOError,i:
                print "\nInput Output Error..."
                print i
        except Exception,e:
                print "\nError in file..."
                print e
	


if __name__ =='__main__':
        main()
